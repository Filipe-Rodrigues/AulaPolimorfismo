/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import core.InterfaceDeJogoListener;
import core.ManicomioDeZulu;
import io.Comando;
import io.Entrada;
import io.FormatoDeComandoException;
import io.JogoEvent;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.text.JTextComponent;

/**
 *
 * @author biiirl
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    private Entrada entrada;
    private ManicomioDeZulu jogo;
    private BufferedImage notFound;
    private Mapa mapa;

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
        initAtributos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        painelImagem = new javax.swing.JPanel();
        labelImagem = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        botaoNorte = new javax.swing.JButton();
        botaoSul = new javax.swing.JButton();
        botaoOeste = new javax.swing.JButton();
        botaoLeste = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(32767, 32767));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jButton1.setText("Executar comando");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);
        //create the font
        mudarFonte (jTextArea1, "SpaceMono-Regular.ttf", 14f);

        jTextField1.setToolTipText("");
        mudarFonte(jTextField1, "SpaceMono-Regular.ttf", 14f);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        painelImagem.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelImagem.setMaximumSize(new java.awt.Dimension(804, 404));
        painelImagem.setMinimumSize(new java.awt.Dimension(804, 404));
        painelImagem.setPreferredSize(new java.awt.Dimension(804, 404));
        painelImagem.setLayout(new java.awt.BorderLayout());

        labelImagem.setText("dasdasd");
        painelImagem.add(labelImagem, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        jPanel2.setMaximumSize(new java.awt.Dimension(200, 100));
        jPanel2.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));

        botaoNorte.setText("Norte");
        botaoNorte.setFocusable(false);
        botaoNorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNorteActionPerformed(evt);
            }
        });

        botaoSul.setText("Sul");
        botaoSul.setFocusable(false);
        botaoSul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSulActionPerformed(evt);
            }
        });

        botaoOeste.setText("Oeste");
        botaoOeste.setFocusable(false);
        botaoOeste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOesteActionPerformed(evt);
            }
        });

        botaoLeste.setText("Leste");
        botaoLeste.setFocusable(false);
        botaoLeste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLesteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(botaoOeste, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(botaoLeste, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(botaoNorte, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(botaoSul, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoNorte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoOeste)
                    .addComponent(botaoLeste))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoSul)
                .addContainerGap())
        );

        jPanel1.add(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(painelImagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelImagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initAtributos() {
        initEntradas();
        inicializarMapa();
        initEngine();
        loadImagemNotFound();
    }

    private void initEntradas() {
        List<String> palavrasDeComando = new ArrayList<>();
        palavrasDeComando.add("ir");
        palavrasDeComando.add("ajuda");
        palavrasDeComando.add("sair");
        palavrasDeComando.add("status");
        palavrasDeComando.add("descrever");
        palavrasDeComando.add("mostrar");
        palavrasDeComando.add("conversar");
        palavrasDeComando.add("atacar");
        palavrasDeComando.add("coletar");
        palavrasDeComando.add("usar");
        palavrasDeComando.add("descartar");
        palavrasDeComando.add("pedir");
        palavrasDeComando.add("cancelar");
        palavrasDeComando.add("fugir");
        palavrasDeComando.add("checar");
        entrada = new Entrada(palavrasDeComando);
    }

    private void initEngine() {
        jogo = new ManicomioDeZulu();
        jogo.adicionarInterfaceDeJogoListener(new InterfaceDeJogoListener() {
            @Override
            public void envioDeComandoPerformed(JogoEvent evt) {
                envioDeComandoDoManicomio(evt);
            }
        });
    }

    private void loadImagemNotFound() {
        try {
            notFound = ImageIO.read(new File("res/images/404.png"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void inicializarMapa() {
        mapa = new Mapa(this, true);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        enviarComando();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviarComando();
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        jTextField1.requestFocus();
    }//GEN-LAST:event_formFocusGained

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        jTextField1.requestFocus();
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void botaoNorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNorteActionPerformed
        Comando comando = new Comando("ir", "norte");
        jogo.processarComando(comando);
    }//GEN-LAST:event_botaoNorteActionPerformed

    private void botaoLesteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLesteActionPerformed
        Comando comando = new Comando("ir", "leste");
        jogo.processarComando(comando);
    }//GEN-LAST:event_botaoLesteActionPerformed

    private void botaoOesteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOesteActionPerformed
        Comando comando = new Comando("ir", "oeste");
        jogo.processarComando(comando);
    }//GEN-LAST:event_botaoOesteActionPerformed

    private void botaoSulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSulActionPerformed
        Comando comando = new Comando("ir", "sul");
        jogo.processarComando(comando);
    }//GEN-LAST:event_botaoSulActionPerformed

    private void envioDeComandoDoManicomio(JogoEvent evt) {
        atualizarCampoDeTexto(evt);
        atualizarImagem(evt.getImagem() + ".png");
        atualizarBotoesDeNavegacao(evt.getSaidasDisponiveis());
        mostrarMapa(evt.querMapa());
        verificarSeTerminou(evt.taFinalizado());
    }
    
    private void atualizarCampoDeTexto(JogoEvent evt) {
        if (evt.deveLimparTela()) {
            jTextArea1.setText("");
        }
        jTextArea1.append(evt.getSaida() + "\n");
    }
    
    private void atualizarBotoesDeNavegacao(List<String> saidas) {
        botaoLeste.setEnabled(false);
        botaoOeste.setEnabled(false);
        botaoNorte.setEnabled(false);
        botaoSul.setEnabled(false);
        for (String direcao : saidas) {
            if (direcao.equals("leste")) {
                botaoLeste.setEnabled(true);
            } else if (direcao.equals("oeste")) {
                botaoOeste.setEnabled(true);
            } else if (direcao.equals("norte")) {
                botaoNorte.setEnabled(true);
            } else if (direcao.equals("sul")) {
                botaoSul.setEnabled(true);
            }
        }
    }
    
    private void mostrarMapa(boolean querMapa) {
        if (querMapa) {
            mapa.setVisible(true);
        }
    }
    
    private void verificarSeTerminou(boolean taFinalizado) {
        if (taFinalizado) {
            jTextField1.setEnabled(false);
            jButton1.setEnabled(false);
        }
    }

    private void enviarComando() {
        if (!jTextField1.getText().trim().equals("")) {
            String linha = jTextField1.getText();
            try {
                Comando comando = entrada.pegarComando(linha);
                jogo.processarComando(comando);
            } catch (FormatoDeComandoException e) {
                jTextArea1.append(e.getMessage());
            }
            jTextField1.setText("");
        }
        jTextField1.requestFocus();
    }

    private void atualizarImagem(String nomeDaImagem) {
        if (!nomeDaImagem.equals(".png")) {
            try {
                BufferedImage img = ImageIO.read(new File("res/images/" + nomeDaImagem));
                labelImagem.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                labelImagem.setIcon(new ImageIcon(notFound));
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }

    private void mudarFonte(JTextComponent campo, String fonte, float tamanho) {
        try {
            //create the font to use. Specify the size!
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("res/fonts/" + fonte)).deriveFont(tamanho);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            //register the font
            ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File("res/fonts/" + fonte)));
            //use the font
            campo.setFont(customFont);
            System.err.println(customFont.getName());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (FontFormatException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoLeste;
    private javax.swing.JButton botaoNorte;
    private javax.swing.JButton botaoOeste;
    private javax.swing.JButton botaoSul;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelImagem;
    private javax.swing.JPanel painelImagem;
    // End of variables declaration//GEN-END:variables

}
