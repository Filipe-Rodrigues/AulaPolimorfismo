/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.gui;

import br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.entities.Ambiente;
import static br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.gui.UtilitariosGUI.CAMINHO_DOS_MAPAS;
import java.awt.Dialog;
import java.awt.Frame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author biiirl
 */
public class DialogoSelecionarMapa extends javax.swing.JDialog {

    private List<Ambiente> mapas;
    private List<String> nomes;
    private Ambiente mapaSelecionado;
    
    /**
     * Creates new form DialogoSelecionarMapa
     */
    public DialogoSelecionarMapa(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initDialogo();
    }
    
    /**
     * Creates new form DialogoSelecionarMapa
     */
    public DialogoSelecionarMapa(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initDialogo();
    }
    
    /**
     * Metodo responsavel por inicializar o dialogo
     */
    private void initDialogo() {
        initComponents();
        initAtributos();
    }

    /**
     * Metodo responsavel por inicializar os atributos
     */
    private void initAtributos() {
        mapaSelecionado = null;
        nomes = new ArrayList<>();
        mapas = new ArrayList<>();
        carregarDadosSalvos();
        preencherLista();
        setTitle("O Manicômio de Zulu");
        this.setLocationRelativeTo(getParent());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelCabecalho = new javax.swing.JPanel();
        botaoSelecionar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDeMundos = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        painelCabecalho.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        painelCabecalho.setPreferredSize(new java.awt.Dimension(0, 50));

        botaoSelecionar.setText("Selecionar mapa");
        botaoSelecionar.setEnabled(false);
        botaoSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelCabecalhoLayout = new javax.swing.GroupLayout(painelCabecalho);
        painelCabecalho.setLayout(painelCabecalhoLayout);
        painelCabecalhoLayout.setHorizontalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoSelecionar, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelCabecalhoLayout.setVerticalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(botaoSelecionar, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        getContentPane().add(painelCabecalho, java.awt.BorderLayout.NORTH);

        listaDeMundos.setModel(new DefaultListModel<String>());
        ListSelectionModel listModel = listaDeMundos.getSelectionModel();
        listModel.addListSelectionListener(new ListSelectionListener () {
            public void valueChanged(ListSelectionEvent e) {
                checarSelecaoDaLista();
            }
        });
        listaDeMundos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaDeMundos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Função carregarDadosSalvos
     * 
     * Executada no início da execução do programa, ela é responsável por carregar
     * os objetos salvos em arquivo contendo os dados dos jogos de todos os usuários
     * registrados.
     * 
     * A anotação <code>@SupressWarnings("unchecked")</code> teve de ser utilizada aqui para
     * instruir o compilador a ignorar a checagem do cast da leitura de um <code>List<Usuario></code>
     * do arquivo, porque a função <code>readObject()</code> retorna <code>Object</code>, e o cast não
     * consegue garantir a checagem do tipo genérico.
     */
    @SuppressWarnings("unchecked")
    private void carregarDadosSalvos() {
        File folder = new File(CAMINHO_DOS_MAPAS);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                String nome = listOfFiles[i].getName();
                nomes.add(nome.substring(0, nome.length() - 4));
                carregarArquivo(listOfFiles[i]);
            }
        }
    }
    
    /**
     * Metodo responsavel por carregar os arquivos
     * @param arquivo 
     */
    private void carregarArquivo(File arquivo) {
        ObjectInputStream ooi = null;
        try {
            FileInputStream fin = new FileInputStream(arquivo);
            ooi = new ObjectInputStream(fin);
            Ambiente mapa = (Ambiente) ooi.readObject();
            mapas.add(mapa);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Nenhum registro encontrado! Iniciando novos registros!", 
                    "O Manicômio de Zulu", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu algum problema ao ler o arquivo!\n"
                    + "Ele pode estar corrompido ou não permite leitura...", 
                    "OH MY GOD!!", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu algum erro interno no programa!", 
                    "OH MY GOD!!", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (ooi != null) {
                try {
                    ooi.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Ocorreu algum problema com sua unidade de armazenamento!", 
                    "OH MY GOD!!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    /**
     * Metodo responsavel pelo preenchimento das listas
     */
    private void preencherLista() {
        DefaultListModel<String> listModel = (DefaultListModel<String>) listaDeMundos.getModel();
        for(String nome : nomes) {
            listModel.addElement(nome);
        }
    }
    
    /**
     * Metodo responsavel pelas ações do botão Selecionar
     * @param evt espera um ActionEvent
     */
    private void botaoSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarActionPerformed
        mapaSelecionado = mapas.get(listaDeMundos.getSelectedIndex());
        dispose();
    }//GEN-LAST:event_botaoSelecionarActionPerformed

    /**
     * Metodo responsavel por pegar o mapa selecionado
     * @return Ambiente do mapa selecionado
     */
    public Ambiente getMapaSelecionado() {
        return mapaSelecionado;
    }
    
    /**
     * Metodo responsavel por checar a seleção das listas
     */
    private void checarSelecaoDaLista() {
        if (listaDeMundos.getSelectedIndex() != -1) {
            botaoSelecionar.setEnabled(true);
        } else {
            botaoSelecionar.setEnabled(false);
        }
    }
    
    /**
     * Metodo responsavel por pegar mapa
     * @param dialogo espera um DialogoSelecionarMapa
     * @return Ambiente
     */
    private static Ambiente getMapa(DialogoSelecionarMapa dialogo) {
        dialogo.setVisible(true);
        JOptionPane pane = new JOptionPane();
        return dialogo.getMapaSelecionado();
    }
    
    /**
     * Metodo responsavel por pegar um mapa
     * @param parent espera um Frame
     * @return Ambiente
     */
    public static Ambiente getMapa(Frame parent) {
        DialogoSelecionarMapa selecionarMapa = new DialogoSelecionarMapa(parent, true);
        return getMapa(selecionarMapa);
    }
    
    /**
     * Metodo responsavel por pegar um mapa
     * @param parent espera um Dialog
     * @return Ambinete
     */
    public static Ambiente getMapa(Dialog parent) {
        DialogoSelecionarMapa selecionarMapa = new DialogoSelecionarMapa(parent, true);
        return getMapa(selecionarMapa);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogoSelecionarMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogoSelecionarMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogoSelecionarMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogoSelecionarMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogoSelecionarMapa dialog = new DialogoSelecionarMapa(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoSelecionar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaDeMundos;
    private javax.swing.JPanel painelCabecalho;
    // End of variables declaration//GEN-END:variables
}
