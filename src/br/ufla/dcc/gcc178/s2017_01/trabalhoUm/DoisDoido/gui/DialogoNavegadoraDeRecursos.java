/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.gui;

import static br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.gui.UtilitariosGUI.CAMINHO_DOS_BACKGROUNDS;
import static br.ufla.dcc.gcc178.s2017_01.trabalhoUm.DoisDoido.gui.UtilitariosGUI.CAMINHO_DOS_ICONES;
import java.awt.Color;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author biiirl
 */
public class DialogoNavegadoraDeRecursos extends javax.swing.JDialog {

    private static final int GERENCIADOR_DE_BACKGROUNDS = 0;
    private static final int GERENCIADOR_DE_ICONES = 1;
    private static final int GERENCIADOR_DE_ITENS_E_NPCS = 2;
    
    private JLabel ultimaLabelSelecionada;
    private String arquivoSelecionado;
    private int modo;
    
    /**
     * Creates new form DialogoNavegadoraDeImagens
     * @param parent O componente que invocou esse diálogo
     * @param modal Se o diálogo força o foco, <code>true</code>. Senão, <code>false</code>.
     * @param modo O tipo de requisição desse diálogo.
     */
    public DialogoNavegadoraDeRecursos(java.awt.Frame parent, boolean modal, int modo) {
        super(parent, modal);
        initComponents();
        initAtributos(modo);
    }
    
    private void initAtributos(int modo) {
        ultimaLabelSelecionada = null;
        arquivoSelecionado = null;
        this.modo = modo;
        preencherGaleria();
        setLocationRelativeTo(this.getParent());
        habilitarAbas(modo);
    }
    
    private void habilitarAbas(int modo) {
        for (int i = 0; i < 4; i++) {
            painelDeAbas.setEnabledAt(i, false);
        }
        painelDeAbas.setEnabledAt(modo, true);
        if (modo == GERENCIADOR_DE_ITENS_E_NPCS) {
            painelDeAbas.setEnabledAt(3, true);
        }
        painelDeAbas.setSelectedIndex(modo);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seletorDeArquivo = new javax.swing.JFileChooser();
        jSeparator1 = new javax.swing.JSeparator();
        painelDeAbas = new javax.swing.JTabbedPane();
        painelPlanosDeFundo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        painelBackgorunds = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        botaoArquivoBackground = new javax.swing.JButton();
        campoImagemBackgorund = new javax.swing.JTextField();
        botaoAdicionar = new javax.swing.JButton();
        painelOpcoesDeIcones = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        botaoArquivoIcone = new javax.swing.JButton();
        campoImagemIcone = new javax.swing.JTextField();
        botaoAdicionarIcone = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        painelIcones = new javax.swing.JPanel();
        painelItens = new javax.swing.JPanel();
        painelNPCs = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        botaoOk = new javax.swing.JButton();
        botaoCancelar = new javax.swing.JButton();

        seletorDeArquivo.setAcceptAllFileFilterUsed(false);
        seletorDeArquivo.setApproveButtonText("Abrir");
        seletorDeArquivo.setApproveButtonToolTipText("Copiar o arquivo para o diretório do jogo");
        seletorDeArquivo.setDialogTitle("Abrir imagem de Background");
        seletorDeArquivo.addChoosableFileFilter(new FileNameExtensionFilter("Arquivos de Imagem", ImageIO.getReaderFileSuffixes()));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(510, 614));
        setMinimumSize(new java.awt.Dimension(510, 614));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(510, 614));
        setResizable(false);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Galeria"));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        painelBackgorunds.setBackground(new java.awt.Color(255, 255, 255));
        painelBackgorunds.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelBackgorundsMouseClicked(evt);
            }
        });
        painelBackgorunds.setLayout(new java.awt.GridLayout(1, 2, 5, 5));
        jScrollPane2.setViewportView(painelBackgorunds);

        botaoArquivoBackground.setText("Selecionar arquivo");
        botaoArquivoBackground.setFocusable(false);
        botaoArquivoBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoArquivoBackgroundActionPerformed(evt);
            }
        });

        campoImagemBackgorund.setFocusable(false);
        campoImagemBackgorund.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoImagemBackgorundMouseClicked(evt);
            }
        });

        botaoAdicionar.setText("Adicionar à galeria");
        botaoAdicionar.setEnabled(false);
        botaoAdicionar.setFocusable(false);
        botaoAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoArquivoBackground)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoImagemBackgorund)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(botaoAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoArquivoBackground)
                    .addComponent(campoImagemBackgorund, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botaoAdicionar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelPlanosDeFundoLayout = new javax.swing.GroupLayout(painelPlanosDeFundo);
        painelPlanosDeFundo.setLayout(painelPlanosDeFundoLayout);
        painelPlanosDeFundoLayout.setHorizontalGroup(
            painelPlanosDeFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPlanosDeFundoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPlanosDeFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        painelPlanosDeFundoLayout.setVerticalGroup(
            painelPlanosDeFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPlanosDeFundoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        painelDeAbas.addTab("Planos de fundo", painelPlanosDeFundo);

        painelOpcoesDeIcones.setEnabled(false);

        botaoArquivoIcone.setText("Selecionar arquivo");
        botaoArquivoIcone.setFocusable(false);
        botaoArquivoIcone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoArquivoIconeActionPerformed(evt);
            }
        });

        campoImagemIcone.setFocusable(false);
        campoImagemIcone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoImagemIconeMouseClicked(evt);
            }
        });

        botaoAdicionarIcone.setText("Adicionar aos Ícones");
        botaoAdicionarIcone.setEnabled(false);
        botaoAdicionarIcone.setFocusable(false);
        botaoAdicionarIcone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarIconeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoArquivoIcone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoImagemIcone, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(botaoAdicionarIcone, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoArquivoIcone)
                    .addComponent(campoImagemIcone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(botaoAdicionarIcone)
                .addContainerGap())
        );

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Galeria"));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        painelIcones.setBackground(new java.awt.Color(255, 255, 255));
        painelIcones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelIconesMouseClicked(evt);
            }
        });
        painelIcones.setLayout(new java.awt.GridLayout(1, 6, 2, 2));
        jScrollPane3.setViewportView(painelIcones);

        javax.swing.GroupLayout painelOpcoesDeIconesLayout = new javax.swing.GroupLayout(painelOpcoesDeIcones);
        painelOpcoesDeIcones.setLayout(painelOpcoesDeIconesLayout);
        painelOpcoesDeIconesLayout.setHorizontalGroup(
            painelOpcoesDeIconesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelOpcoesDeIconesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelOpcoesDeIconesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        painelOpcoesDeIconesLayout.setVerticalGroup(
            painelOpcoesDeIconesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelOpcoesDeIconesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        painelDeAbas.addTab("Ícones", painelOpcoesDeIcones);

        javax.swing.GroupLayout painelItensLayout = new javax.swing.GroupLayout(painelItens);
        painelItens.setLayout(painelItensLayout);
        painelItensLayout.setHorizontalGroup(
            painelItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        painelItensLayout.setVerticalGroup(
            painelItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );

        painelDeAbas.addTab("Itens", painelItens);

        javax.swing.GroupLayout painelNPCsLayout = new javax.swing.GroupLayout(painelNPCs);
        painelNPCs.setLayout(painelNPCsLayout);
        painelNPCsLayout.setHorizontalGroup(
            painelNPCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        painelNPCsLayout.setVerticalGroup(
            painelNPCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );

        painelDeAbas.addTab("NPCs", painelNPCs);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 65));
        jPanel3.setMinimumSize(new java.awt.Dimension(100, 65));
        jPanel3.setPreferredSize(new java.awt.Dimension(0, 65));

        botaoOk.setText("OK");
        botaoOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOkActionPerformed(evt);
            }
        });

        botaoCancelar.setText("Cancelar");
        botaoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoOk, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoOk)
                    .addComponent(botaoCancelar))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelDeAbas)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelDeAbas, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preencherGaleria() {
        if (modo != GERENCIADOR_DE_ITENS_E_NPCS) {
            File folder;
            if (modo == GERENCIADOR_DE_BACKGROUNDS) {
                folder = new File(CAMINHO_DOS_BACKGROUNDS);
            } else {
                folder = new File(CAMINHO_DOS_ICONES);
            }
            File[] listOfFiles = folder.listFiles();
            for (int i = 0; i < listOfFiles.length; i++) {
                if (listOfFiles[i].isFile()) {
                    inserirMiniatura(listOfFiles[i].getAbsolutePath(), 
                            (modo == GERENCIADOR_DE_BACKGROUNDS) 
                            ? (painelBackgorunds) : (painelIcones));
                }
            }
        }
    }
    
    private void inserirMiniatura(String caminhoDoArquivo, JPanel painel) {
        ImageIcon icon;
        if (modo == GERENCIADOR_DE_BACKGROUNDS) {
            icon = new ImageIcon(new ImageIcon(caminhoDoArquivo)
                .getImage().getScaledInstance(200, 100, Image.SCALE_SMOOTH));
        } else {
            icon = new ImageIcon(new ImageIcon(caminhoDoArquivo)
                .getImage().getScaledInstance(32, 32, Image.SCALE_SMOOTH));
        }
        JLabel label = new JLabel(icon) {
            @Override
            public String toString() {
                return getToolTipText();
            }
            
        };
        
        label.setToolTipText(new File(caminhoDoArquivo).getName());
        
        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                labelImagemMouseClicked(evt);
            }
        });
        
        int quant = painel.getComponentCount();
        GridLayout gl = (GridLayout) painel.getLayout();
        int mod = (modo == GERENCIADOR_DE_BACKGROUNDS) ? (2) : (8);
        if (quant % mod == 0) {
            gl.setRows(gl.getRows() + 1);
        }
        painel.add(label);
        revalidate();
        repaint();
    }
    
    private void copiarArquivoParaDiretorio(String origem, String destino) {
        File source = new File(origem);
        File dest = new File(destino + "/" + source.getName());
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        try {
            sourceChannel = new FileInputStream(source).getChannel();
            destChannel = new FileOutputStream(dest).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
                if (destChannel != null) {
                    destChannel.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    private void desmarcarUltimaLabel() {
        if (ultimaLabelSelecionada != null) {
            ultimaLabelSelecionada.setBorder(null);
            ultimaLabelSelecionada = null;
        }
    }
    
    private void botaoAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarActionPerformed
        copiarArquivoParaDiretorio(campoImagemBackgorund.getText(), CAMINHO_DOS_BACKGROUNDS);
        inserirMiniatura(new File(campoImagemBackgorund.getText()).getAbsolutePath(), painelBackgorunds);
        campoImagemBackgorund.setText("");
        botaoAdicionar.setEnabled(false);
    }//GEN-LAST:event_botaoAdicionarActionPerformed

    private void procurarArquivoNoComputador(JButton botao, JTextField campo) {
        int returnVal = seletorDeArquivo.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            campo.setText(seletorDeArquivo.getSelectedFile().getAbsolutePath());
            botao.setEnabled(true);
        } else {
            campo.setText("");
            botao.setEnabled(false);
        }
    }
    
    public void labelImagemMouseClicked(MouseEvent evt) {
        if (ultimaLabelSelecionada != null) {
            ultimaLabelSelecionada.setBorder(null);
        }
        ultimaLabelSelecionada = (JLabel) evt.getSource();
        ultimaLabelSelecionada.setBorder(BorderFactory.createLineBorder(Color.red));
    }
    
    private void botaoArquivoBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoArquivoBackgroundActionPerformed
        procurarArquivoNoComputador(botaoAdicionar, campoImagemBackgorund);
    }//GEN-LAST:event_botaoArquivoBackgroundActionPerformed

    private void campoImagemBackgorundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoImagemBackgorundMouseClicked
        procurarArquivoNoComputador(botaoAdicionar, campoImagemBackgorund);
    }//GEN-LAST:event_campoImagemBackgorundMouseClicked

    private void botaoOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOkActionPerformed
        if (ultimaLabelSelecionada != null) {
            arquivoSelecionado = ultimaLabelSelecionada.getToolTipText();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this.getParent(), "Nenhuma imagem foi selecionada!", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botaoOkActionPerformed

    private void botaoCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botaoCancelarActionPerformed

    private void painelBackgorundsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelBackgorundsMouseClicked
        desmarcarUltimaLabel();
    }//GEN-LAST:event_painelBackgorundsMouseClicked

    private void botaoArquivoIconeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoArquivoIconeActionPerformed
        procurarArquivoNoComputador(botaoAdicionarIcone, campoImagemIcone);
    }//GEN-LAST:event_botaoArquivoIconeActionPerformed

    private void campoImagemIconeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoImagemIconeMouseClicked
        procurarArquivoNoComputador(botaoAdicionarIcone, campoImagemIcone);
    }//GEN-LAST:event_campoImagemIconeMouseClicked

    private void botaoAdicionarIconeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarIconeActionPerformed
        copiarArquivoParaDiretorio(campoImagemIcone.getText(), CAMINHO_DOS_ICONES);
        inserirMiniatura(new File(campoImagemIcone.getText()).getAbsolutePath(), painelIcones);
        campoImagemIcone.setText("");
        botaoAdicionarIcone.setEnabled(false);
    }//GEN-LAST:event_botaoAdicionarIconeActionPerformed

    private void painelIconesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelIconesMouseClicked
        desmarcarUltimaLabel();
    }//GEN-LAST:event_painelIconesMouseClicked

    public static String getImagemDeFundo(Frame componentePai) {
        DialogoNavegadoraDeRecursos navegadora = new DialogoNavegadoraDeRecursos(componentePai, true, GERENCIADOR_DE_BACKGROUNDS);
        navegadora.setVisible(true);
        return navegadora.arquivoSelecionado;
    }
    
    public static String getIcone(Frame componentePai) {
        DialogoNavegadoraDeRecursos navegadora = new DialogoNavegadoraDeRecursos(componentePai, true, GERENCIADOR_DE_ICONES);
        navegadora.setVisible(true);
        return navegadora.arquivoSelecionado;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DialogoNavegadoraDeRecursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                DialogoNavegadoraDeRecursos dialog = new DialogoNavegadoraDeRecursos(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
        String imagem = getIcone(null);
        if (imagem != null) {
            System.err.println(imagem);
        } else {
            System.err.println("Cancelado!");
        }
        String imagem2 = getImagemDeFundo(null);
        if (imagem2 != null) {
            System.err.println(imagem2);
        } else {
            System.err.println("Cancelado!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdicionar;
    private javax.swing.JButton botaoAdicionarIcone;
    private javax.swing.JButton botaoArquivoBackground;
    private javax.swing.JButton botaoArquivoIcone;
    private javax.swing.JButton botaoCancelar;
    private javax.swing.JButton botaoOk;
    private javax.swing.JTextField campoImagemBackgorund;
    private javax.swing.JTextField campoImagemIcone;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel painelBackgorunds;
    private javax.swing.JTabbedPane painelDeAbas;
    private javax.swing.JPanel painelIcones;
    private javax.swing.JPanel painelItens;
    private javax.swing.JPanel painelNPCs;
    private javax.swing.JPanel painelOpcoesDeIcones;
    private javax.swing.JPanel painelPlanosDeFundo;
    private javax.swing.JFileChooser seletorDeArquivo;
    // End of variables declaration//GEN-END:variables
}
